#!/bin/bash

timestamp=$(date "+%Y-%m-%d %H:%M:%S")
PROJECT_DIR="$(pwd)"
NEW_ENTRY="$1"
ENTRY_POINT="$2"
APP_TYPE=${3:-terminal}
DEST_ARG=${4:-$(pwd)/}

[[ "${DEST_ARG: -1}" != "/" ]] && DEST_ARG="${DEST_ARG}/"

mkdir -p "$DEST_ARG" || {
    echo "Error: Could not create or access destination directory $DEST_ARG"
    exit 1
}

OUTPUT_NAME=$(basename "$NEW_ENTRY" .py)
SPEC_PATH=$(basename "$NEW_ENTRY" .spec)
FINAL_DIST_PATH="$DEST_ARG$OUTPUT_NAME"

if [[ "$OS_TYPE" == *"MINGW"* || "$OS_TYPE" == *"CYGWIN"* ]]; then
    FINAL_DIST_PATH="$(cygpath -m "$FINAL_DIST_PATH")"
fi

DIST_PATH="$PROJECT_DIR/dist"
BUILD_PATH="$PROJECT_DIR/build"
OS_TYPE=$(uname -s)

MKDIR="/usr/bin/mkdir"
RM="/usr/bin/rm"

# If you need to use sudo commands you will need to uncomment these lines. (239, 241, 279, 281)
# just make sure you comment out the non sudo commands
#SUDO="/usr/bin/sudo"

DATE="/usr/bin/date"
CP="/usr/bin/cp"
MV="/usr/bin/mv"
CHMOD="/usr/bin/chmod"
DIRNAME="/usr/bin/dirname"
BASENAME="/usr/bin/basename"

for cmd in $MKDIR $RM $DATE $CP $MV $CHMOD $DIRNAME $BASENAME; do
    if [ ! -x "$cmd" ]; then
        echo "CRITICAL ERROR: Missing $cmd"
        echo "Your MSYS2 environment is broken. Please:"
        echo "1. Restart your MSYS2 terminal"
        echo "2. Run: pacman -Syu"
        echo "3. Run: pacman -S --needed base-devel msys2-runtime"
        exit 1
    fi
done

# Try to fix PATH if broken
if ! command -v mkdir >/dev/null; then
    echo "Warning: PATH appears broken, attempting to fix..."
    export PATH="/usr/bin:/bin:/mingw64/bin:$PATH"
fi

gen_uninstall() {
    local os_type="$1"
    local project_dir="$2"
    local output_name="$3"
    local final_dist_path="$4"

    local uninstall_script="${project_dir}/uninstall_${output_name}.sh"

    cat > "$uninstall_script" <<EOF
#!/bin/bash

# Uninstaller for $output_name
# Generated by CrudePyBuild

# Configuration
RM="/usr/bin/rm"
CHMOD="/usr/bin/chmod"

# Check if binary exists
if [ ! -f "$final_dist_path" ]; then
    echo "Error: $output_name not found at $final_dist_path"
    echo "It may have already been uninstalled"
    exit 1
fi

echo "Uninstalling $output_name..."
echo "Removing: $final_dist_path"

# Remove the binary
if ! \$RM -f "$final_dist_path"; then
    echo "Failed to remove $final_dist_path"
    echo "You may need to run this script with sudo"
    exit 1
fi

# Remove supporting files based on OS
case "$os_type" in
    Linux*)
        echo "Removing Linux-specific files..."
        \$RM -rf "/usr/local/share/$output_name"
        \$RM -rf "/usr/local/etc/$output_name"
        \$RM -rf "~/.config/$output_name"
        \$RM -rf "~/.local/share/$output_name"
        ;;
    MINGW*|CYGWIN*)
        echo "Removing Windows/MSYS2-specific files..."
        \$RM -rf "/usr/local/share/$output_name"
        \$RM -rf "/etc/$output_name"
        \$RM -rf "\$HOME/.config/$output_name"
        \$RM -rf "\$HOME/AppData/Roaming/$output_name"
        \$RM -rf "\$HOME/AppData/Local/$output_name"
        ;;
    Darwin*)
        echo "Removing macOS-specific files..."
        \$RM -rf "/usr/local/share/$output_name"
        \$RM -rf "/usr/local/etc/$output_name"
        \$RM -rf "\$HOME/Library/Application Support/$output_name"
        \$RM -rf "\$HOME/Library/Preferences/$output_name"
        ;;
    *)
        echo "Unknown OS type. Only removing main binary."
        ;;
esac

echo "Successfully uninstalled $output_name"
echo "You may manually remove any remaining configuration files if needed"

exit 0
EOF

    $CHMOD +x "$uninstall_script"

    echo "Created uninstaller: $uninstall_script"
    echo "To uninstall, run: ./$(basename "$uninstall_script")"
}

create_directory() {
    local dir_path="$1"
    echo "Creating directory path: $dir_path"

    if [ -d "$dir_path" ]; then
        echo "Directory already exists"
        return 0
    fi

    if ! $MKDIR -p "$dir_path"; then
        echo "Error: Failed to create directory path $dir_path"
        exit 1
    fi
    echo "Directory created successfully"
}

echo ""
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo "CrudePyBuild v0.0.1"
echo "Build started: $timestamp"
echo ""
echo "Build process for $OUTPUT_NAME has started."
echo "Application Type: $APP_TYPE"
echo "Entry Point: $ENTRY_POINT"
echo "Project Path: $PROJECT_DIR"
echo "Destination Path: $FINAL_DIST_PATH"
echo "$OS_TYPE"
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

if [ ! -d ".venv" ]; then
    echo ""
    echo ".venv not found. Creating virtual environment..."
    python3 -m venv .venv
fi

echo ""
echo "Activating virtual environment..."
source .venv/bin/activate
. .venv/bin/activate
echo ""
echo "Installing PyInstaller..."
pip install pyinstaller --quiet
echo ""
echo "Freezing Required Modules"
pip freeze > requirements.txt
echo ""
echo "Checking Requirements"
pip install -r requirements.txt --quiet
if [ ! -d "$BUILD_PATH" ]; then
    echo "Creating '$BUILD_PATH'"
    mkdir "$BUILD_PATH"
fi

if [ ! -d "$DIST_PATH" ]; then
    echo "Creating '$DIST_PATH'"
    mkdir "$DIST_PATH"
fi

echo ""
echo "Building binary with PyInstaller..."

PYINSTALLER_FLAGS="--specpath $PROJECT_DIR/$SPEC_PATH --distpath $DIST_PATH --onefile --name $NEW_ENTRY"

if [ "$APP_TYPE" = "gui" ]; then
    echo "Configuring build for GUI application..."
    echo "$OS_TYPE"
    if [[ "$OS_TYPE" == "MINGW"* || "$OS_TYPE" == "CYGWIN"* ]]; then
        PYINSTALLER_FLAGS="$PYINSTALLER_FLAGS --windowed --noconsole"
    else
        PYINSTALLER_FLAGS="$PYINSTALLER_FLAGS --windowed"
    fi
else
    echo "Configuring build for terminal application..."
fi

if [[ "$OS_TYPE" == "Linux" ]]; then
    echo ""
    echo "Building for Linux..."
    pyinstaller $PYINSTALLER_FLAGS "$PROJECT_DIR/$ENTRY_POINT"
elif [[ "$OS_TYPE" == "MINGW"* || "$OS_TYPE" == "CYGWIN"* ]]; then
    echo ""
    echo "Building for Windows..."
    PYINSTALLER_FLAGS="$PYINSTALLER_FLAGS --hidden-import win32security --hidden-import win32gui --hidden-import win32timezone"
    # For Windows, we need to handle paths differently
    pyinstaller $(echo $PYINSTALLER_FLAGS) "$PROJECT_DIR/$ENTRY_POINT"
else
    echo ""
    echo "Unsupported OS: $OS_TYPE"
    exit 1
fi

BINARY_PATH="$DIST_PATH/$OUTPUT_NAME"

echo ""
echo "Select an action for the binary:"
echo "1. Move to $FINAL_DIST_PATH"
echo "2. Copy to $FINAL_DIST_PATH"
echo "3. Skip Both"
read -rp "Enter your choice (1/2/3): " CHOICE

case $CHOICE in
  1)
    echo ""
    echo "Moving $BINARY_PATH to $FINAL_DIST_PATH"
    create_directory "$($DIRNAME "$FINAL_DIST_PATH")"
    $MV "$BINARY_PATH" "$FINAL_DIST_PATH"
    #$SUDO $MV "$BINARY_PATH" "$FINAL_DIST_PATH" && \
    $CHMOD +x "$FINAL_DIST_PATH"
    #$SUDO $CHMOD +x "$FINAL_DIST_PATH"
    echo "Move complete."
    echo "Setting executable permissions for $FINAL_DIST_PATH"
    sudo chmod +x "$FINAL_DIST_PATH"
    echo ""
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo "Done! execute the application anywhere by typing: '$OUTPUT_NAME'."
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo ""
    echo "Remove build artifacts?:"
    echo "1. Yes they can be deleted"
    echo "2. No I want to keep them"
    read -rp "Enter your choice (1/2): " DEL_CHOICE

    case $DEL_CHOICE in
      1)
        echo ""
        echo "Removing build artifacts..."
        rm -rf dist/ build/ *.spec
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        echo "Build artifacts have been removed."
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        ;;
      2)
        echo ""
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        echo "Build artifacts preserved in their respective directories."
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        ;;
    esac
    ;;

  2)
    echo ""
    echo "Copying $BINARY_PATH to $FINAL_DIST_PATH"
    create_directory "$($DIRNAME "$FINAL_DIST_PATH")"
    #$SUDO $CP "$BINARY_PATH" "$FINAL_DIST_PATH" && \
    $CP "$BINARY_PATH" "$FINAL_DIST_PATH" && \
    #$SUDO $CHMOD +x "$FINAL_DIST_PATH"
    echo "Setting executable permissions for $FINAL_DIST_PATH"
    $CHMOD +x "$FINAL_DIST_PATH"
    echo "Copy complete."
    echo ""
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo "Done! execute the application anywhere by typing: '$OUTPUT_NAME'."
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo ""
    echo "Remove build artifacts?:"
    echo "1. Yes they can be deleted"
    echo "2. No I want to keep them"
    read -rp "Enter your choice (1/2): " DEL_CHOICE

    case $DEL_CHOICE in
      1)
        echo ""
        echo "Removing build artifacts..."
        rm -rf dist/ build/ *.spec
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        echo "Build artifacts have been removed."
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        ;;
      2)
        echo ""
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        echo "Build artifacts preserved in their respective directories."
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        ;;
    esac
    ;;

  3)
    echo ""
    echo "Move and Copy have been skipped. Binary can be located here: $BINARY_PATH"
    echo "Setting executable permissions for $BINARY_PATH"
    $CHMOD +x "$BINARY_PATH"
    echo ""
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo "Done! execute the application in its binary directory by typing: '$OUTPUT_NAME'."
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    ;;

  *)
    echo ""
    echo "Invalid choice. No action taken. Binary can be located here: $BINARY_PATH"
    echo "Setting executable permissions for $BINARY_PATH"
    $CHMOD +x "$BINARY_PATH"
    echo ""
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo "Done! execute the application in its binary directory by typing: '$OUTPUT_NAME'."
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    ;;
esac

gen_uninstall "$(OS_TYPE)" "$(PROJECT_DIR)" "$(OUTPUT_NAME)"  "$(FINAL_DIST_PATH)"

done_stamp=$(date "+%Y-%m-%d %H:%M:%S")
echo "Build ended: $done_stamp"

